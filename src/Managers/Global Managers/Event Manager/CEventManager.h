////////////////////////////////////////////////////////////////////////////////
//	File			:	EventManager.h
//	Date			:	3/29/11
//	Mod. Date		:	7/26/11
//	Mod. Initials	:	MR
//	Author			:	Mac Reichelt
//	Purpose			:	Handles events sent between components for the entire
//						game.
////////////////////////////////////////////////////////////////////////////////

#ifndef _CEVENTMANAGER_H_
#define _CEVENTMANAGER_H_

#include <string>
#include <map>
#include <set>
#include <list>
using namespace std;

#include "../Memory Manager/CEventAllocator.h"
#include "IEvent.h"
#include "..\..\..\Enums.h"

//class IEvent;
class IComponent;
typedef unsigned int EventID;

class CEventManager
{
	// Struct needed to correctly insert new events into the event set
	struct cmp
	{
		bool operator()(const IEvent* lhs, const IEvent* rhs)
		{
			if(lhs->m_nPriority == rhs->m_nPriority)
			{
				// If two priorities are the same, sort based on
				// address
				return lhs < rhs;
			}
			return lhs->m_nPriority < rhs->m_nPriority;
		}
	};
	struct TListener
	{
		IComponent* m_pcListener;
		void (*m_pfCallback)(IEvent*, IComponent*);
	};

typedef multimap<EventID, TListener*, less<EventID>, 
CEventAllocator<pair<EventID, TListener*>>> EventMap;

typedef multimap<EventID, TListener*, less<EventID>, 
CEventAllocator<pair<EventID, TListener*>>>::iterator EventIter;

	EventMap	m_cListeners;

	set<IEvent*, cmp, CEventAllocator<IEvent*> > m_cEventList;

	/////////////////
	// Constructor //
	/////////////////
	CEventManager();

	/////////////////////
	// Trilogy of Evil //
	/////////////////////
	~CEventManager();
	CEventManager(const CEventManager&);
	CEventManager& operator=(const CEventManager&);

	// Things needed to properly unregister events
	struct TUnregister
	{
		EventID nEventID;
		IComponent* pListener;
	};
	// Container for events that need to be unregistered
	list<TUnregister, CEventAllocator<TUnregister>> m_cUnregisterList;

	void UnregisterEvents();

	void ActuallyUnregisterEvent(EventID nEventID, IComponent* pcListener);

	void ActuallyUnregisterEventAll(IComponent* pcListener);


public:
////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	static CEventManager* GetInstance();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	EventID RegisterEvent(string szEventName, IComponent* pcListener, 
		void(*pfCallback)(IEvent*, IComponent*)); // callback(Comp* sender, iEvent);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void RegisterEvent(EventID nEventID, IComponent* pcListener, 
		void(*pfCallback)(IEvent*, IComponent*));

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	bool AlreadyRegistered(EventID nEventID, IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void UnregisterEvent(EventID nEventID, IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void UnregisterEventAll(IComponent* pcListener);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void PostEvent(IEvent* pcEvent, unsigned int nPriority);

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void ProcessEvents();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void ClearEvents();

////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////
	void Shutdown();
};

#endif