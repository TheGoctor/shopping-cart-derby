////////////////////////////////////////////////////////////////////////////////
//	File			:	CJamUseEffectComp.h
//	Date			:	7/27/11
//	Mod. Date		:	7/27/11
//	Mod. Initials	:	JL
//	Author			:	Joseph Leybovich
//	Purpose			:	Encapsulates the Jam Use Effect
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Header Protection
///////////////////////////////////////////////////////////////////////////////
#ifndef _CJAMUSEEFFECTCOMP_H_
#define _CJAMUSEEFFECTCOMP_H_

///////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////
#include "CRenderComponent.h"
#include "CEffectComponent.h"
#include "..\\..\\IComponent.h"
#include "..\\..\\CObject.h"
#include "..\\..\\Managers\\Component Managers\\CComponentManager.h"

///////////////////////////////////////////////////////////////////////////////
// Jam Use VFX Structure
///////////////////////////////////////////////////////////////////////////////
struct TJamUseVFX
{
	///////////////////////////////////////////////////////////////////////////
	// Data Members
	///////////////////////////////////////////////////////////////////////////

		CObject* m_pMeshObj;				// Jar Mesh Obj
		CRenderComponent* m_pMeshRenComp;	// Jar Mesh Render Comp
		CEffectComponent* m_pTrailEffect;	// Trail Effect Comp
		bool m_bActive;						// Active Flag

	///////////////////////////////////////////////////////////////////////////
	// Construtor
	///////////////////////////////////////////////////////////////////////////
	TJamUseVFX(void) : m_pMeshObj(NULL), m_pMeshRenComp(NULL), 
		m_pTrailEffect(NULL), m_bActive(false)
	{
	}

	///////////////////////////////////////////////////////////////////////////
	// Destructor
	///////////////////////////////////////////////////////////////////////////
	~TJamUseVFX(void);

	///////////////////////////////////////////////////////////////////////////
	// Function: “Init”
	//
	// Return: void
	//
	// Parameters: CObject* pParentObj - Parent Object to Attach to
	//
	// Purpose: This Function is used to Initalize the Effects by Creating
	//			Effect Objects, Meshs, Render Components and Emitters.
	///////////////////////////////////////////////////////////////////////////
	void Init(CObject* pParentObj);

	///////////////////////////////////////////////////////////////////////////
	// Function: “Reset”
	//
	// Return: void
	//
	// Parameters: void
	//
	// Purpose: This Function is used to Reinitalize the Effects by
	//			Transforming the Objects and turning the Effects On.
	///////////////////////////////////////////////////////////////////////////
	void Reset(void);

	///////////////////////////////////////////////////////////////////////
	// Function: “Update”
	//
	// Return: void
	//
	// Parameters: float fDT - The time since the last Frame
	//
	// Purpose: This Functions is used to Handle Updating Jam Use Effects
	//			and Check for end of the Effects.
	///////////////////////////////////////////////////////////////////////
	void Update(float fDT);
};

///////////////////////////////////////////////////////////////////////////////
// Type Definitions
///////////////////////////////////////////////////////////////////////////////
typedef list<TJamUseVFX*, CAllocator<TJamUseVFX*>> JamUseVFXList;

///////////////////////////////////////////////////////////////////////////////
// Jam Use Effect Component Class
///////////////////////////////////////////////////////////////////////////////
class CJamUseEffectComp : public IComponent
{
private:

	///////////////////////////////////////////////////////////////////////////
	// Data Members
	///////////////////////////////////////////////////////////////////////////

		CObject* m_pParentObj;			// Parent Object
		JamUseVFXList m_cActiveJams;	// Active Jams Effects
		JamUseVFXList m_cDeadJams;		// Dead Jams Effects

	///////////////////////////////////////////////////////////////////////////
	// Event Handlers
	///////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////
		// Function: “Update”
		//
		// Return: void
		//
		// Parameters: float fDT - The time since the last Frame
		//
		// Purpose: This Function is used to Handle Updating Jam Use Effects
		//			and Check for end of Duration to Switch Effects Off.
		///////////////////////////////////////////////////////////////////////
		void Update(float fDT);

		///////////////////////////////////////////////////////////////////////
		// Function: “UseJam”
		//
		// Return: void
		//
		// Parameters: void
		//
		// Purpose: This Functions is used to Handle activating the Jam Use
		//			Effects on the Player that used it.
		///////////////////////////////////////////////////////////////////////
		void UseJam(void);

public:

	///////////////////////////////////////////////////////////////////////////
	// Function: “Init”
	//
	// Return: void
	//
	// Parameters: void
	//
	// Purpose: This Function is used to Initalize the Component by
	//			Registering for Events.
	///////////////////////////////////////////////////////////////////////////
	void Init(void);

	///////////////////////////////////////////////////////////////////////////
	// Constructor
	///////////////////////////////////////////////////////////////////////////
	CJamUseEffectComp(CObject* pParentPlayerObj) : m_pParentObj(pParentPlayerObj)
	{
		// Add to Auto Manager
		GetManager()->Add(this);

		// Add Component to Parent
		m_pParentObj->AddComponent(this);

		// Initalize
		Init();
	}

	///////////////////////////////////////////////////////////////////////////
	// Destructor
	///////////////////////////////////////////////////////////////////////////
	~CJamUseEffectComp(void)
	{
		// Remove from Manager
		GetManager()->Remove(this);
	}

	///////////////////////////////////////////////////////////////////////////
	// Factory Funcs
	///////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////
		// Function: “CreateJamUseVFXComponent”
		//
		// Return: CJamUseEffectComp* - A New Jam Use Effect Component 
		//								connected to the Passed in Object
		//
		// Parameters: CObject* pPlayerParentObj - The Parent Player Object
		//
		// Purpose: This Functions is used to Create a Jam Use Effect
		//			Component and Attach it to an Object through C++.
		///////////////////////////////////////////////////////////////////////
		static CJamUseEffectComp* CreateJamUseVFXComponent(CObject* pPlayerParentObj)
		{
			return MMNEW(CJamUseEffectComp(pPlayerParentObj));
		}

	///////////////////////////////////////////////////////////////////////////////
	// Event Callbacks
	///////////////////////////////////////////////////////////////////////////////
	
		///////////////////////////////////////////////////////////////////////////
		// Function: “UpdateCallback”
		//
		// Return: void
		//
		// Parameters: IEvent* pEvent	 - Event Data
		//			   IComponent* pComp - The Listening Component
		//
		// Purpose: This Functions is used to Handle Updating the Passed in
		//			Component's Jam Use Effects and Check for end of Effects.
		///////////////////////////////////////////////////////////////////////////
		static void UpdateCallback(IEvent* pEvent, IComponent* pComp);
		
		///////////////////////////////////////////////////////////////////////
		// Function: “JamUseCallback”
		//
		// Return: void
		//
		// Parameters: IEvent* pEvent	 - Event Data
		//			   IComponent* pComp - The Listening Component
		//
		// Purpose: This Function is used to Handle activating the Passed in
		//			Component's Jam Use Effects on the Player that used it.
		///////////////////////////////////////////////////////////////////////
		static void JamUseCallback(IEvent* pEvent, IComponent* pComp);

		///////////////////////////////////////////////////////////////////////////
		// Function: “ShutdownGameplayCallback”
		//
		// Return: void
		//
		// Parameters: IEvent*			 - Event Data
		//			   IComponent* pComp - The Listening Component
		//
		// Purpose: This Functions is used to Shutdown the Passed in Component's
		//			Jam Effects on Gameplay State Exit.
		///////////////////////////////////////////////////////////////////////////
		static void ShutdownGameplayCallback(IEvent* pEvent, IComponent* pComp);

	///////////////////////////////////////////////////////////////////////////
	// Accessors
	///////////////////////////////////////////////////////////////////////////
	
		// Parent Object
		CObject* GetParent(void) { return m_pParentObj; }

		// Auto-Manager
		static CComponentManager<CJamUseEffectComp>* GetManager(void)
		{
			static CComponentManager<CJamUseEffectComp> m_cManager;

			return &m_cManager;
		}
};
#endif // _CJAMUSEEFFECTCOMP_H_